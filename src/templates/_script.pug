script.
  document.documentElement.classList.remove("-no-js");
  document.addEventListener("DOMContentLoaded", () => {
    const $Search = document.querySelector("#Search");
    if (!$Search) return;
    let debounceTimer = 0;
    const refs = Array.from(document.querySelectorAll("article[id^=reference]"));
    const models = refs.map((ref) => ({
      id: ref.id,
      title: ref.querySelector(".-reference").innerText.toLowerCase(),
      link: ref.querySelector(".-reference").href.toLowerCase(),
      content: ref.children[2] ? ref.children[1].innerText.toLowerCase() : null,
    }));

    const getMatchedIds = (lc_query) => models.filter(({ title, link, content }) => RegExp(lc_query).test(title) || RegExp(lc_query).test(link) || RegExp(lc_query).test(content)).map(({ id }) => id);

    const search = (query) => {
      const ids = getMatchedIds(query.toLowerCase());
      refs.forEach((ref) => (ids.includes(ref.id) ? ref.removeAttribute("hidden") : ref.setAttribute("hidden", "")));
    };

    const reset = () => refs.forEach((ref) => ref.removeAttribute("hidden"));

    const handleInput = (query) => {
      if (debounceTimer) clearTimeout(debounceTimer);
      debounceTimer = query === "" ? setTimeout(() => handleReset(), 1000 / 30) : setTimeout(() => search(query), 1000 / 30);
    };

    const handleReset = () => reset();

    $Search.addEventListener("input", ({ target }) => handleInput(target.value), false);
    $Search.addEventListener("reset", () => handleReset(), false);
  });
